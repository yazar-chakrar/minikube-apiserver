# docker compose up -d redis mongodb mysql postgres rabbitmq elasticsearch kibana
version: "3.8"

name: brikoula-apps
services:
  redis:
    container_name: redis_container
    image: redis:7.2.5-alpine
    restart: always
    ports:
      - $REDIS_PORT:$REDIS_DOCKER_PORT
    command: redis-server --loglevel warning
    volumes:
      - ./volumes/docker-volumes/cache:/data

  mongodb:
    container_name: mongodb_container
    image: mongo:7.0.4
    restart: always
    ports:
      - $MONGODB_PORT:$MONGODB_DOCKER_PORT
    volumes:
      - ./volumes/docker-volumes/data:/data/db

  mysql:
    container_name: mysql_container
    image: mysql:8.0.31
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - MYSQL_USER=$MYSQL_USER
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
    ports:
      - "${MYSQL_PORT}:${MYSQL_DOCKER_PORT}"
    volumes:
      - ./volumes/docker-volumes/mysql:/var/lib/mysql

  postgres:
    container_name: postgres_container
    image: postgres:16.0
    restart: always
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_DOCKER_PORT}"
    volumes:
      - ./volumes/docker-volumes/postgres:/var/lib/postgresql

  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=$RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_DEFAULT_PASS
    ports:
      # AMQP protocol port
      - "${RABBITMQ_PROTOCOL_PORT}:${RABBITMQ_DOCKER_PROTOCOL_PORT}"
      # Management UI
      - "${RABBITMQ_MNG_PORT}:${RABBITMQ_DOCKER_MNG_PORT}"

  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: "true"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
      xpack.security.authc.token.enabled: "true"
      ELASTIC_PASSWORD: $ELASTIC_PASSWORD
    ports:
      - $ELASTICSEARCH_PORT:$ELASTICSEARCH_DOCKER_PORT
      - $ELASTICSEARCH_HOST:$ELASTICSEARCH_DOCKER_HOST
    expose:
      - "9200"
    volumes:
      - ./volumes/docker-volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic

  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.14.3
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
      - ELASTICSEARCH_USERNAME=$ELASTICSEARCH_USERNAME
      - ELASTICSEARCH_PASSWORD=$ELASTICSEARCH_PASSWORD
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=$ELASTICSEARCH_SERVICEACCOUNT_TOKEN
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
    ports:
      - $KIBANA_PORT:$KIBANA_DOCKER_PORT
    networks:
      - elastic
    volumes:
      - ./volumes/kibana.yml/:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch

  apmServer:
    container_name: apm_server_container
    image: docker.elastic.co/apm/apm-server:8.12.2
    ports:
      - $APM_PORT:$APM_DOCKER_PORT
    volumes:
      - ./volumes/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    networks:
      - elastic
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana_container:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana_container:5601
        -E apm-server.kibana.protocol=http
        -E strict.perms=false
        -E apm-server.auth.anonymous.enabled=true

  metricbeat:
    container_name: metricbeat_container
    image: docker.elastic.co/beats/metricbeat:8.14.3
    user: root
    ports:
      - 5066:5066
    networks:
      - elastic
    volumes:
      - ./volumes/metricbeat.yml/:/usr/share/metricbeat/metricbeat.yml:ro
      # docker module
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # system module
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
    depends_on:
      - elasticsearch

  heartbeat:
    container_name: heartbeat_container
    image: docker.elastic.co/beats/heartbeat:8.14.3
    user: root
    hostname: heartbeat
    cap_add:
      - NET_RAW
    networks:
      - elastic
    command: ["--strict.perms=false"]
    volumes:
      - ./volumes/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
    depends_on:
      - elasticsearch

networks:
  elastic:
    name: elastic
